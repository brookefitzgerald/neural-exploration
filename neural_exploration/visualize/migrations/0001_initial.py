# -*- coding: utf-8 -*-
# Generated by Django 1.10.8 on 2017-11-13 17:15
from __future__ import unicode_literals
from os import listdir
from scipy.io import loadmat

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


def col_to_str_row(array):
    return str([item[0] for item in array])


def forwards_func(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    Experiment = apps.get_model("visualize", "Experiment")
    Experiment.objects.using(db_alias).bulk_create([
        Experiment(
            pk=1,
            slug="isik_26",
            name="Isik 26 Letter MEG Data",
            index_stimulus_shown=233,
            description="The Isik 26 letter MEG dataset was collected by Leyl\
            a Isik in Tommy Poggioâ€™s lab and the MEG Lab at the McGovern Inst\
            itute at MIT. The data consists of 306 channel (comprised of 102 \
            magentometers, and 204 planar gradiometers) MEG recordings from a\
            n Elekta Neuromag Triux Scanner. One subject was shown 26 black, \
            upper-case letters, on a white background, while their neural res\
            ponse was recorded in the MEG scanner. Each letter was presented \
            approximately 50 times.",
        ),
    ])
    Site = apps.get_model("visualize", "Site")
    Data = apps.get_model("visualize", "Data")
    Metadata = apps.get_model("visualize", "Metadata")
    site_pk = 0
    for mat_file in listdir('./isik_data'):
        mat_data = loadmat('./isik_data/' + mat_file)

        data = mat_data['raster_data']
        labels = mat_data['raster_labels'][0][0][0]
        metadata_variables = mat_data['raster_site_info'][0].dtype.names
        metadata_values = [
            val[0] if len(val) == 1 else col_to_str_row(val)
            for val in mat_data['raster_site_info'][0][0]
        ]

        metadata = zip(metadata_variables, metadata_values)

        site_slug = mat_file[7:12]
        site_pk += 1
        Site.objects.using(db_alias).create(Site(slug=site_slug, experiment=1))

        Metadata.objects.using(db_alias).bulk_create([
            Metadata(
                site=site_pk,
                information_variable=var,
                information_value=val) for (var, val) in metadata
        ])
        Data.objects.using(db_alias).bulk_create([
            Data(
                site=site_pk,
                trial_number=trial_number,
                label_one=labels[trial_number],
                data=data[trial_number, :])
            for trial_number in range(data.shape[0])
        ])


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trial_number', models.IntegerField()),
                ('label_one', models.CharField(max_length=30)),
                ('label_two', models.CharField(blank=True, max_length=30, null=True)),
                ('label_three', models.CharField(blank=True, max_length=30, null=True)),
                ('label_four', models.CharField(blank=True, max_length=30, null=True)),
                ('data', django.contrib.postgres.fields.ArrayField(base_field=models.DecimalField(decimal_places=10, max_digits=15), size=None)),
            ],
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(max_length=30, unique=True)),
                ('name', models.TextField()),
                ('description', models.TextField()),
                ('index_stimulus_shown', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Metadata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('information_variable', models.CharField(max_length=30)),
                ('information_value', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(max_length=30)),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='visualize.Experiment')),
            ],
        ),
        migrations.AddField(
            model_name='metadata',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='visualize.Site'),
        ),
        migrations.AddField(
            model_name='data',
            name='experiment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='visualize.Experiment'),
        ),
        migrations.AddField(
            model_name='data',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='visualize.Site'),
        ),
        migrations.RunPython(forwards_func),
    ]
